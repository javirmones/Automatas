import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;


parser code {:

public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("Análisis incorrecto");
        report_error(message, info);
        System.exit(1);
    }

:}


non terminal dec_metodos, metodo_simple, dec_argumentos, cuerpo_metodo, dec_for, tipo_boolean, metodo_void, tipos_metodos, cuerpo_metodo_void, bloque_inst_void, dec_incr, dec_incr_exp;
non terminal tipo_variables, tipo_void, dec_tipos, dec_llamada, dec_exp,dec_exp_n1, dec_exp_n2, bloque_inst, inst, generar_tipos, dec_exp_n4, dec_exp_n5, exp_metodo;
non terminal dec_return, cuerpo_for, for_st_1, for_st_2, for_st_3, cabecera_for, dec_llamada_args, inst_void, dec_asigs, dec_exp_n3, parte_tipos, dec_for_void, cuerpo_for_void;

terminal String LL_A, LL_C, FOR ,ID, RETURN, PUNTOCOMA, NUM, PUNTO, OR, DISTINTO, DECREMENTO;
terminal String RELACIONALES, ASIGNACION, INCREMENTO, PAR_A, PAR_C, COMA, POR, DIV, MENOS, MAS;
terminal String CABECERA_METODOS, AND, NOT, BOOLEAN, TRUE, FALSE, INT, VOID, MASIGUAL, MENOSIGUAL, NULL;

/* Metodos */
dec_metodos ::= tipos_metodos | tipos_metodos dec_metodos;

tipos_metodos ::= metodo_simple | metodo_void;

metodo_simple ::= CABECERA_METODOS tipo_variables ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo LL_C;

metodo_void ::= CABECERA_METODOS tipo_void ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo_void LL_C;

dec_argumentos ::= tipo_variables ID | tipo_variables ID COMA dec_argumentos | ;

cuerpo_metodo ::= bloque_inst |  ;    

cuerpo_metodo_void ::= bloque_inst_void | ;

/* Instrucciones */
bloque_inst ::= inst | inst bloque_inst;

bloque_inst_void ::= inst_void | inst_void bloque_inst_void;

inst ::= dec_for | dec_llamada | dec_tipos| dec_asigs | dec_return | dec_incr_exp;

inst_void ::= dec_for_void | dec_llamada | dec_tipos | dec_asigs | dec_incr_exp;

/* For */
dec_for ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for LL_C;

dec_for_void ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for_void LL_C;

cabecera_for ::= for_st_1 PUNTOCOMA for_st_2 PUNTOCOMA for_st_3 ;

for_st_1 ::=  tipo_variables ID ASIGNACION dec_exp | ID ASIGNACION dec_exp;

for_st_2 ::= ID RELACIONALES dec_exp | ID DISTINTO dec_exp;

for_st_3 ::= dec_incr | ID ASIGNACION dec_exp;

cuerpo_for ::= bloque_inst | ;

cuerpo_for_void ::= bloque_inst_void | ;

/*Generar tipos */
dec_tipos ::= parte_tipos PUNTOCOMA;

parte_tipos ::= tipo_variables generar_tipos;

generar_tipos ::= ID | ID COMA generar_tipos;

/*Asignaciones */
dec_asigs ::= parte_tipos ASIGNACION dec_exp PUNTOCOMA
                | ID ASIGNACION dec_exp PUNTOCOMA;

/*Llamadas a métodos */
dec_llamada ::= exp_metodo PUNTOCOMA;

dec_incr_exp ::= dec_incr PUNTOCOMA;

dec_incr ::= ID INCREMENTO | ID DECREMENTO | ID MASIGUAL dec_exp | ID MENOSIGUAL dec_exp;

exp_metodo ::= ID PAR_A dec_llamada_args PAR_C;

dec_llamada_args ::= dec_exp | dec_exp COMA dec_llamada_args | ; 

dec_return ::= RETURN dec_exp PUNTOCOMA;

/* Expresiones */
dec_exp ::=  dec_exp OR dec_exp_n1 | dec_exp_n1;

dec_exp_n1 ::= dec_exp_n1 AND dec_exp_n2 | dec_exp_n2;

dec_exp_n2 ::= dec_exp_n2 RELACIONALES dec_exp_n3 | dec_exp_n2 DISTINTO dec_exp_n3 | dec_exp_n3;

dec_exp_n3 ::= dec_exp_n3 MAS dec_exp_n4 | dec_exp_n3 MENOS dec_exp_n4 | dec_exp_n4;

dec_exp_n4 ::= dec_exp_n4 POR dec_exp_n5 | dec_exp_n4 DIV dec_exp_n5 | dec_exp_n5;

dec_exp_n5 ::= MENOS dec_exp_n5 | NOT dec_exp_n5 | PAR_A dec_exp PAR_C | NUM | ID| NULL | ID PUNTO ID | tipo_boolean | exp_metodo;

/*Tipos*/
tipo_variables ::= INT | BOOLEAN ;

tipo_void ::= VOID;

tipo_boolean ::= TRUE | FALSE;


