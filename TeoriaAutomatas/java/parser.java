
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 07 15:01:16 CEST 2019
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 07 15:01:16 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\011\003\000\002\011\003\000\002\003\013" +
    "\000\002\010\013\000\002\004\004\000\002\004\006\000" +
    "\002\004\002\000\002\005\003\000\002\005\002\000\002" +
    "\012\003\000\002\012\002\000\002\025\003\000\002\025" +
    "\004\000\002\013\003\000\002\013\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\006\011\000\002\046\011\000\002\040\007" +
    "\000\002\035\006\000\002\035\005\000\002\036\005\000" +
    "\002\036\005\000\002\037\003\000\002\037\005\000\002" +
    "\034\003\000\002\034\002\000\002\047\003\000\002\047" +
    "\002\000\002\020\004\000\002\045\004\000\002\027\003" +
    "\000\002\027\005\000\002\043\006\000\002\043\006\000" +
    "\002\021\004\000\002\015\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\032" +
    "\006\000\002\041\003\000\002\041\005\000\002\041\002" +
    "\000\002\033\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\031\004\000\002\031\004\000" +
    "\002\031\005\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\005\000\002\031\003\000\002\031" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\031\010\001\002\000\006\002\ufffe\031" +
    "\ufffe\001\002\000\006\002\001\031\010\001\002\000\006" +
    "\002\ufffd\031\ufffd\001\002\000\004\002\234\001\002\000" +
    "\010\034\013\037\015\040\012\001\002\000\004\007\205" +
    "\001\002\000\004\007\uffae\001\002\000\004\007\uffaf\001" +
    "\002\000\004\007\016\001\002\000\004\007\uffb0\001\002" +
    "\000\004\022\017\001\002\000\010\023\ufff8\034\013\037" +
    "\015\001\002\000\004\023\025\001\002\000\004\007\022" +
    "\001\002\000\006\023\ufffa\024\023\001\002\000\010\023" +
    "\ufff8\034\013\037\015\001\002\000\004\023\ufff9\001\002" +
    "\000\004\004\026\001\002\000\016\005\ufff6\006\044\007" +
    "\036\010\032\034\013\037\015\001\002\000\016\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\034\uffee\037\uffee\001\002\000" +
    "\016\005\ufff3\006\044\007\036\010\032\034\013\037\015" +
    "\001\002\000\016\005\uffed\006\uffed\007\uffed\010\uffed\034" +
    "\uffed\037\uffed\001\002\000\022\007\061\012\053\022\051" +
    "\027\055\033\063\035\056\036\060\043\057\001\002\000" +
    "\016\005\uffec\006\uffec\007\uffec\010\uffec\034\uffec\037\uffec" +
    "\001\002\000\004\011\201\001\002\000\004\005\200\001" +
    "\002\000\016\016\143\020\175\021\145\022\107\041\142" +
    "\042\146\001\002\000\016\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\034\uffef\037\uffef\001\002\000\004\007\171\001\002" +
    "\000\016\005\uffeb\006\uffeb\007\uffeb\010\uffeb\034\uffeb\037" +
    "\uffeb\001\002\000\016\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\034\uffea\037\uffea\001\002\000\004\011\170\001\002\000" +
    "\004\022\126\001\002\000\004\005\ufff7\001\002\000\006" +
    "\011\050\020\047\001\002\000\022\007\061\012\053\022" +
    "\051\027\055\033\063\035\056\036\060\043\057\001\002" +
    "\000\016\005\uffd7\006\uffd7\007\uffd7\010\uffd7\034\uffd7\037" +
    "\uffd7\001\002\000\022\007\061\012\053\022\051\027\055" +
    "\033\063\035\056\036\060\043\057\001\002\000\014\011" +
    "\uffc5\014\uffc5\023\uffc5\024\uffc5\032\116\001\002\000\030" +
    "\011\uffb6\014\uffb6\015\uffb6\017\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6\001\002\000\006" +
    "\011\123\014\114\001\002\000\022\007\061\012\053\022" +
    "\051\027\055\033\063\035\056\036\060\043\057\001\002" +
    "\000\030\011\uffad\014\uffad\015\uffad\017\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\032\uffad\001\002" +
    "\000\030\011\uffb4\014\uffb4\015\uffb4\017\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\001\002" +
    "\000\030\011\uffac\014\uffac\015\uffac\017\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\032\uffac\001\002" +
    "\000\034\011\uffb5\013\106\014\uffb5\015\uffb5\017\uffb5\022" +
    "\107\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\001\002\000\030\011\uffb1\014\uffb1\015\uffb1\017" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\032\uffb1\001\002\000\022\007\061\012\053\022\051\027" +
    "\055\033\063\035\056\036\060\043\057\001\002\000\030" +
    "\011\uffba\014\uffba\015\uffba\017\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\032\uffba\001\002\000\030" +
    "\011\uffbd\014\uffbd\015\uffbd\017\uffbd\023\uffbd\024\uffbd\025" +
    "\100\026\077\027\uffbd\030\uffbd\032\uffbd\001\002\000\024" +
    "\011\uffc0\014\uffc0\015\uffc0\017\uffc0\023\uffc0\024\uffc0\027" +
    "\075\030\074\032\uffc0\001\002\000\030\011\uffb2\014\uffb2" +
    "\015\uffb2\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\032\uffb2\001\002\000\020\011\uffc3\014\uffc3" +
    "\015\071\017\072\023\uffc3\024\uffc3\032\uffc3\001\002\000" +
    "\022\007\061\012\053\022\051\027\055\033\063\035\056" +
    "\036\060\043\057\001\002\000\022\007\061\012\053\022" +
    "\051\027\055\033\063\035\056\036\060\043\057\001\002" +
    "\000\024\011\uffc2\014\uffc2\015\uffc2\017\uffc2\023\uffc2\024" +
    "\uffc2\027\075\030\074\032\uffc2\001\002\000\022\007\061" +
    "\012\053\022\051\027\055\033\063\035\056\036\060\043" +
    "\057\001\002\000\022\007\061\012\053\022\051\027\055" +
    "\033\063\035\056\036\060\043\057\001\002\000\030\011" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\023\uffbe\024\uffbe\025\100" +
    "\026\077\027\uffbe\030\uffbe\032\uffbe\001\002\000\022\007" +
    "\061\012\053\022\051\027\055\033\063\035\056\036\060" +
    "\043\057\001\002\000\022\007\061\012\053\022\051\027" +
    "\055\033\063\035\056\036\060\043\057\001\002\000\030" +
    "\011\uffbc\014\uffbc\015\uffbc\017\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\001\002\000\030" +
    "\011\uffbb\014\uffbb\015\uffbb\017\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\001\002\000\030" +
    "\011\uffbf\014\uffbf\015\uffbf\017\uffbf\023\uffbf\024\uffbf\025" +
    "\100\026\077\027\uffbf\030\uffbf\032\uffbf\001\002\000\024" +
    "\011\uffc1\014\uffc1\015\uffc1\017\uffc1\023\uffc1\024\uffc1\027" +
    "\075\030\074\032\uffc1\001\002\000\030\011\uffb8\014\uffb8" +
    "\015\uffb8\017\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\032\uffb8\001\002\000\004\007\121\001\002" +
    "\000\024\007\061\012\053\022\051\023\uffc8\027\055\033" +
    "\063\035\056\036\060\043\057\001\002\000\010\014\114" +
    "\023\uffca\024\113\001\002\000\004\023\112\001\002\000" +
    "\030\011\uffcb\014\uffcb\015\uffcb\017\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\001\002\000" +
    "\024\007\061\012\053\022\051\023\uffc8\027\055\033\063" +
    "\035\056\036\060\043\057\001\002\000\022\007\061\012" +
    "\053\022\051\027\055\033\063\035\056\036\060\043\057" +
    "\001\002\000\014\011\uffc6\014\uffc6\023\uffc6\024\uffc6\032" +
    "\116\001\002\000\022\007\061\012\053\022\051\027\055" +
    "\033\063\035\056\036\060\043\057\001\002\000\020\011" +
    "\uffc4\014\uffc4\015\071\017\072\023\uffc4\024\uffc4\032\uffc4" +
    "\001\002\000\004\023\uffc9\001\002\000\030\011\uffb3\014" +
    "\uffb3\015\uffb3\017\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\032\uffb3\001\002\000\030\011\uffb9\014" +
    "\uffb9\015\uffb9\017\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\001\002\000\016\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\034\uffd3\037\uffd3\001\002\000\006" +
    "\014\114\023\125\001\002\000\030\011\uffb7\014\uffb7\015" +
    "\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\032\uffb7\001\002\000\010\007\127\034\013\037" +
    "\015\001\002\000\004\020\166\001\002\000\004\023\161" +
    "\001\002\000\004\007\156\001\002\000\004\011\133\001" +
    "\002\000\004\007\134\001\002\000\006\015\152\017\153" +
    "\001\002\000\004\011\136\001\002\000\004\007\137\001" +
    "\002\000\014\016\143\020\144\021\145\041\142\042\146" +
    "\001\002\000\004\023\uffdd\001\002\000\004\023\uffe2\001" +
    "\002\000\022\007\061\012\053\022\051\027\055\033\063" +
    "\035\056\036\060\043\057\001\002\000\006\011\uffce\023" +
    "\uffce\001\002\000\022\007\061\012\053\022\051\027\055" +
    "\033\063\035\056\036\060\043\057\001\002\000\006\011" +
    "\uffcf\023\uffcf\001\002\000\022\007\061\012\053\022\051" +
    "\027\055\033\063\035\056\036\060\043\057\001\002\000" +
    "\010\011\uffcc\014\114\023\uffcc\001\002\000\006\014\114" +
    "\023\uffdc\001\002\000\010\011\uffcd\014\114\023\uffcd\001" +
    "\002\000\022\007\061\012\053\022\051\027\055\033\063" +
    "\035\056\036\060\043\057\001\002\000\022\007\061\012" +
    "\053\022\051\027\055\033\063\035\056\036\060\043\057" +
    "\001\002\000\006\011\uffdf\014\114\001\002\000\006\011" +
    "\uffde\014\114\001\002\000\004\020\157\001\002\000\022" +
    "\007\061\012\053\022\051\027\055\033\063\035\056\036" +
    "\060\043\057\001\002\000\006\011\uffe1\014\114\001\002" +
    "\000\004\004\162\001\002\000\016\005\uffda\006\044\007" +
    "\036\010\032\034\013\037\015\001\002\000\004\005\uffdb" +
    "\001\002\000\004\005\165\001\002\000\016\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\034\uffe4\037\uffe4\001\002\000\022" +
    "\007\061\012\053\022\051\027\055\033\063\035\056\036" +
    "\060\043\057\001\002\000\006\011\uffe0\014\114\001\002" +
    "\000\016\005\uffd1\006\uffd1\007\uffd1\010\uffd1\034\uffd1\037" +
    "\uffd1\001\002\000\010\011\uffd5\020\uffd5\024\173\001\002" +
    "\000\006\011\uffd6\020\uffd6\001\002\000\004\007\171\001" +
    "\002\000\006\011\uffd4\020\uffd4\001\002\000\022\007\061" +
    "\012\053\022\051\027\055\033\063\035\056\036\060\043" +
    "\057\001\002\000\006\011\177\014\114\001\002\000\016" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\034\uffd2\037\uffd2\001" +
    "\002\000\006\002\ufffc\031\ufffc\001\002\000\016\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\034\uffd0\037\uffd0\001\002\000" +
    "\006\011\203\014\114\001\002\000\016\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\034\uffc7\037\uffc7\001\002\000\004\005" +
    "\ufff2\001\002\000\004\022\206\001\002\000\010\023\ufff8" +
    "\034\013\037\015\001\002\000\004\023\210\001\002\000" +
    "\004\004\211\001\002\000\014\005\ufff4\006\212\007\036" +
    "\034\013\037\015\001\002\000\004\022\225\001\002\000" +
    "\004\005\ufff5\001\002\000\014\005\uffe7\006\uffe7\007\uffe7" +
    "\034\uffe7\037\uffe7\001\002\000\004\005\224\001\002\000" +
    "\014\005\uffe6\006\uffe6\007\uffe6\034\uffe6\037\uffe6\001\002" +
    "\000\014\005\uffe5\006\uffe5\007\uffe5\034\uffe5\037\uffe5\001" +
    "\002\000\014\005\uffe9\006\uffe9\007\uffe9\034\uffe9\037\uffe9" +
    "\001\002\000\014\005\uffe8\006\uffe8\007\uffe8\034\uffe8\037" +
    "\uffe8\001\002\000\014\005\ufff1\006\212\007\036\034\013" +
    "\037\015\001\002\000\004\005\ufff0\001\002\000\006\002" +
    "\ufffb\031\ufffb\001\002\000\010\007\127\034\013\037\015" +
    "\001\002\000\004\023\227\001\002\000\004\004\230\001" +
    "\002\000\014\005\uffd8\006\212\007\036\034\013\037\015" +
    "\001\002\000\004\005\uffd9\001\002\000\004\005\233\001" +
    "\002\000\014\005\uffe3\006\uffe3\007\uffe3\034\uffe3\037\uffe3" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\002\006\003\003\010\005\011\004\001" +
    "\001\000\002\001\001\000\012\002\234\003\003\010\005" +
    "\011\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\013\017\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\017\016\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\023\016\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\034\006\036\014\033\015\041\016" +
    "\037\020\030\021\026\025\044\026\027\032\042\033\040" +
    "\043\032\045\045\001\001\000\002\001\001\000\032\006" +
    "\036\014\033\015\041\016\037\020\030\021\026\025\203" +
    "\026\027\032\042\033\040\043\032\045\045\001\001\000" +
    "\002\001\001\000\022\007\066\022\201\023\051\024\067" +
    "\030\064\031\063\032\061\044\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\066\022" +
    "\053\023\051\024\067\030\064\031\063\032\061\044\065" +
    "\001\001\000\002\001\001\000\022\007\066\022\123\023" +
    "\051\024\067\030\064\031\063\032\061\044\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\066\031\121\032\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\066\031\104\032\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\066\030\064" +
    "\031\063\032\061\044\103\001\001\000\014\007\066\030" +
    "\064\031\063\032\061\044\072\001\001\000\002\001\001" +
    "\000\012\007\066\030\102\031\063\032\061\001\001\000" +
    "\012\007\066\030\075\031\063\032\061\001\001\000\002" +
    "\001\001\000\010\007\066\031\101\032\061\001\001\000" +
    "\010\007\066\031\100\032\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\066\022\107" +
    "\023\051\024\067\030\064\031\063\032\061\041\110\044" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\066\022\107\023\051\024\067\030" +
    "\064\031\063\032\061\041\117\044\065\001\001\000\020" +
    "\007\066\023\114\024\067\030\064\031\063\032\061\044" +
    "\065\001\001\000\002\001\001\000\016\007\066\024\116" +
    "\030\064\031\063\032\061\044\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\130\035\131\040\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\137\037\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\066\022\150" +
    "\023\051\024\067\030\064\031\063\032\061\044\065\001" +
    "\001\000\002\001\001\000\022\007\066\022\147\023\051" +
    "\024\067\030\064\031\063\032\061\044\065\001\001\000" +
    "\002\001\001\000\022\007\066\022\146\023\051\024\067" +
    "\030\064\031\063\032\061\044\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\066" +
    "\022\154\023\051\024\067\030\064\031\063\032\061\044" +
    "\065\001\001\000\022\007\066\022\153\023\051\024\067" +
    "\030\064\031\063\032\061\044\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\066" +
    "\022\157\023\051\024\067\030\064\031\063\032\061\044" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\036\014\033\015\041\016\037\020\030\021\026\025" +
    "\162\026\027\032\042\033\040\034\163\043\032\045\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\066\022\166\023\051\024\067\030\064" +
    "\031\063\032\061\044\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\173\001\001\000\002\001\001\000\022\007\066\022" +
    "\175\023\051\024\067\030\064\031\063\032\061\044\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\206\016" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\214\013\212\014\033\015\216\016\037\020\213\021" +
    "\220\032\042\042\221\043\215\045\045\046\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\013\222\014\033\015" +
    "\216\016\037\020\213\021\220\032\042\042\221\043\215" +
    "\045\045\046\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\130\035\131\040\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\230\014\033\015" +
    "\216\016\037\020\213\021\220\032\042\042\221\043\215" +
    "\045\045\046\217\047\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("Análisis incorrecto");
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_boolean",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_boolean",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_void ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_void",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_variables ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_variables ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dec_exp_n5 ::= exp_metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dec_exp_n5 ::= tipo_boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dec_exp_n5 ::= ID PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dec_exp_n5 ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dec_exp_n5 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dec_exp_n5 ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_exp_n5 ::= PAR_A dec_exp PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_exp_n5 ::= NOT dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_exp_n5 ::= MENOS dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_exp_n4 ::= dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_exp_n4 ::= dec_exp_n4 DIV dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_exp_n4 ::= dec_exp_n4 POR dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_exp_n3 ::= dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_exp_n3 ::= dec_exp_n3 MENOS dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_exp_n3 ::= dec_exp_n3 MAS dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_exp_n2 ::= dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_exp_n2 ::= dec_exp_n2 DISTINTO dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_exp_n2 ::= dec_exp_n2 RELACIONALES dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_exp_n1 ::= dec_exp_n2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_exp_n1 ::= dec_exp_n1 AND dec_exp_n2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_exp ::= dec_exp_n1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_exp ::= dec_exp OR dec_exp_n1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_return ::= RETURN dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_llamada_args ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_llamada_args ::= dec_exp COMA dec_llamada_args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_llamada_args ::= dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_metodo ::= ID PAR_A dec_llamada_args PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_metodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_incr ::= ID MENOSIGUAL dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_incr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_incr ::= ID MASIGUAL dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_incr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_incr ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_incr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_incr ::= ID INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_incr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_incr_exp ::= dec_incr PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_incr_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_llamada ::= exp_metodo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_asigs ::= ID ASIGNACION dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_asigs",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_asigs ::= parte_tipos ASIGNACION dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_asigs",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // generar_tipos ::= ID COMA generar_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("generar_tipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // generar_tipos ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("generar_tipos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parte_tipos ::= tipo_variables generar_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_tipos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_tipos ::= parte_tipos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_for_void ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_void",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_for_void ::= bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_void",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo_for ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_for ::= bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_st_3 ::= ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_st_3 ::= dec_incr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_st_2 ::= ID DISTINTO dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_st_2 ::= ID RELACIONALES dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for_st_1 ::= ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_st_1 ::= tipo_variables ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cabecera_for ::= for_st_1 PUNTOCOMA for_st_2 PUNTOCOMA for_st_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_for",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_for_void ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for_void LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for_void",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_for ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inst_void ::= dec_incr_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst_void ::= dec_asigs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst_void ::= dec_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst_void ::= dec_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst_void ::= dec_for_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst ::= dec_incr_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inst ::= dec_return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inst ::= dec_asigs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inst ::= dec_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst ::= dec_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inst ::= dec_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_inst_void ::= inst_void bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_inst_void ::= inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_inst ::= inst bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_inst ::= inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_metodo_void ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_metodo_void ::= bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_metodo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_metodo ::= bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_argumentos ::= tipo_variables ID COMA dec_argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_argumentos ::= tipo_variables ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodo_void ::= CABECERA_METODOS tipo_void ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo_void LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo_void",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodo_simple ::= CABECERA_METODOS tipo_variables ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos_metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_metodos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos_metodos ::= metodo_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_metodos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_metodos ::= tipos_metodos dec_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_metodos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= dec_metodos EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // dec_metodos ::= tipos_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_metodos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

