
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 06 21:51:28 CEST 2019
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 06 21:51:28 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\011\003\000\002\011\003\000\002\003\013" +
    "\000\002\010\013\000\002\004\004\000\002\004\006\000" +
    "\002\004\002\000\002\005\003\000\002\005\002\000\002" +
    "\012\003\000\002\012\002\000\002\023\003\000\002\023" +
    "\004\000\002\013\003\000\002\013\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\006\011\000\002\044" +
    "\011\000\002\036\007\000\002\033\006\000\002\033\005" +
    "\000\002\034\005\000\002\034\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\005\000\002\035\005\000\002" +
    "\032\003\000\002\032\002\000\002\045\003\000\002\045" +
    "\002\000\002\016\004\000\002\043\004\000\002\025\003" +
    "\000\002\025\005\000\002\041\006\000\002\041\006\000" +
    "\002\017\004\000\002\030\006\000\002\037\003\000\002" +
    "\037\005\000\002\037\002\000\002\031\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\031\010\001\002\000\006\002\ufffe\031" +
    "\ufffe\001\002\000\006\002\001\031\010\001\002\000\006" +
    "\002\ufffd\031\ufffd\001\002\000\004\002\224\001\002\000" +
    "\010\034\013\037\015\040\012\001\002\000\004\007\176" +
    "\001\002\000\004\007\uffb4\001\002\000\004\007\uffb5\001" +
    "\002\000\004\007\016\001\002\000\004\007\uffb6\001\002" +
    "\000\004\022\017\001\002\000\010\023\ufff8\034\013\037" +
    "\015\001\002\000\004\023\025\001\002\000\004\007\022" +
    "\001\002\000\006\023\ufffa\024\023\001\002\000\010\023" +
    "\ufff8\034\013\037\015\001\002\000\004\023\ufff9\001\002" +
    "\000\004\004\026\001\002\000\016\005\ufff6\006\027\007" +
    "\037\010\043\034\013\037\015\001\002\000\004\022\137" +
    "\001\002\000\006\011\134\020\133\001\002\000\004\005" +
    "\ufff7\001\002\000\004\007\127\001\002\000\016\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\034\uffed\037\uffed\001\002\000" +
    "\016\005\uffef\006\uffef\007\uffef\010\uffef\034\uffef\037\uffef" +
    "\001\002\000\016\005\ufff3\006\027\007\037\010\043\034" +
    "\013\037\015\001\002\000\016\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\034\uffeb\037\uffeb\001\002\000\006\020\123\022" +
    "\102\001\002\000\016\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\034\uffec\037\uffec\001\002\000\004\011\122\001\002\000" +
    "\004\005\121\001\002\000\020\007\054\012\047\022\045" +
    "\027\051\033\056\035\052\036\053\001\002\000\016\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\034\uffee\037\uffee\001\002" +
    "\000\020\007\054\012\047\022\045\027\051\033\056\035" +
    "\052\036\053\001\002\000\014\011\uffca\014\uffca\023\uffca" +
    "\024\uffca\032\111\001\002\000\030\011\uffbb\014\uffbb\015" +
    "\uffbb\017\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\032\uffbb\001\002\000\006\011\116\014\107\001" +
    "\002\000\020\007\054\012\047\022\045\027\051\033\056" +
    "\035\052\036\053\001\002\000\030\011\uffb3\014\uffb3\015" +
    "\uffb3\017\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\032\uffb3\001\002\000\030\011\uffb2\014\uffb2\015" +
    "\uffb2\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\032\uffb2\001\002\000\034\011\uffba\013\101\014" +
    "\uffba\015\uffba\017\uffba\022\102\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\032\uffba\001\002\000\030\011" +
    "\uffb7\014\uffb7\015\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\032\uffb7\001\002\000\020\007" +
    "\054\012\047\022\045\027\051\033\056\035\052\036\053" +
    "\001\002\000\030\011\uffbf\014\uffbf\015\uffbf\017\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf" +
    "\001\002\000\030\011\uffc2\014\uffc2\015\uffc2\017\uffc2\023" +
    "\uffc2\024\uffc2\025\073\026\072\027\uffc2\030\uffc2\032\uffc2" +
    "\001\002\000\024\011\uffc5\014\uffc5\015\uffc5\017\uffc5\023" +
    "\uffc5\024\uffc5\027\070\030\067\032\uffc5\001\002\000\030" +
    "\011\uffb8\014\uffb8\015\uffb8\017\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\001\002\000\020" +
    "\011\uffc8\014\uffc8\015\064\017\065\023\uffc8\024\uffc8\032" +
    "\uffc8\001\002\000\020\007\054\012\047\022\045\027\051" +
    "\033\056\035\052\036\053\001\002\000\020\007\054\012" +
    "\047\022\045\027\051\033\056\035\052\036\053\001\002" +
    "\000\024\011\uffc7\014\uffc7\015\uffc7\017\uffc7\023\uffc7\024" +
    "\uffc7\027\070\030\067\032\uffc7\001\002\000\020\007\054" +
    "\012\047\022\045\027\051\033\056\035\052\036\053\001" +
    "\002\000\020\007\054\012\047\022\045\027\051\033\056" +
    "\035\052\036\053\001\002\000\030\011\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\023\uffc3\024\uffc3\025\073\026\072\027\uffc3" +
    "\030\uffc3\032\uffc3\001\002\000\020\007\054\012\047\022" +
    "\045\027\051\033\056\035\052\036\053\001\002\000\020" +
    "\007\054\012\047\022\045\027\051\033\056\035\052\036" +
    "\053\001\002\000\030\011\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\032" +
    "\uffc1\001\002\000\030\011\uffc0\014\uffc0\015\uffc0\017\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032" +
    "\uffc0\001\002\000\030\011\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\023\uffc4\024\uffc4\025\073\026\072\027\uffc4\030\uffc4\032" +
    "\uffc4\001\002\000\024\011\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\023\uffc6\024\uffc6\027\070\030\067\032\uffc6\001\002\000" +
    "\030\011\uffbd\014\uffbd\015\uffbd\017\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\001\002\000" +
    "\004\007\114\001\002\000\022\007\054\012\047\022\045" +
    "\023\uffcd\027\051\033\056\035\052\036\053\001\002\000" +
    "\010\014\107\023\uffcf\024\106\001\002\000\004\023\105" +
    "\001\002\000\030\011\uffd0\014\uffd0\015\uffd0\017\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0" +
    "\001\002\000\022\007\054\012\047\022\045\023\uffcd\027" +
    "\051\033\056\035\052\036\053\001\002\000\020\007\054" +
    "\012\047\022\045\027\051\033\056\035\052\036\053\001" +
    "\002\000\014\011\uffcb\014\uffcb\023\uffcb\024\uffcb\032\111" +
    "\001\002\000\020\007\054\012\047\022\045\027\051\033" +
    "\056\035\052\036\053\001\002\000\020\011\uffc9\014\uffc9" +
    "\015\064\017\065\023\uffc9\024\uffc9\032\uffc9\001\002\000" +
    "\004\023\uffce\001\002\000\030\011\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\001\002\000\030\011\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\032\uffbe\001\002\000\016\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\034\uffcc\037\uffcc\001\002\000\006\014\107\023" +
    "\120\001\002\000\030\011\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032" +
    "\uffbc\001\002\000\006\002\ufffc\031\ufffc\001\002\000\016" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\034\uffd1\037\uffd1\001" +
    "\002\000\020\007\054\012\047\022\045\027\051\033\056" +
    "\035\052\036\053\001\002\000\006\011\125\014\107\001" +
    "\002\000\016\005\uffd2\006\uffd2\007\uffd2\010\uffd2\034\uffd2" +
    "\037\uffd2\001\002\000\004\005\ufff2\001\002\000\010\011" +
    "\uffd5\020\uffd5\024\131\001\002\000\006\011\uffd6\020\uffd6" +
    "\001\002\000\004\007\127\001\002\000\006\011\uffd4\020" +
    "\uffd4\001\002\000\020\007\054\012\047\022\045\027\051" +
    "\033\056\035\052\036\053\001\002\000\016\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\034\uffd7\037\uffd7\001\002\000\006" +
    "\011\136\014\107\001\002\000\016\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\034\uffd3\037\uffd3\001\002\000\010\007\140" +
    "\034\013\037\015\001\002\000\004\020\174\001\002\000" +
    "\004\023\167\001\002\000\004\007\164\001\002\000\004" +
    "\011\144\001\002\000\004\007\145\001\002\000\006\015" +
    "\160\017\161\001\002\000\004\011\147\001\002\000\004" +
    "\007\150\001\002\000\012\016\153\020\154\021\155\041" +
    "\152\001\002\000\004\023\uffe4\001\002\000\020\007\054" +
    "\012\047\022\045\027\051\033\056\035\052\036\053\001" +
    "\002\000\004\023\uffde\001\002\000\020\007\054\012\047" +
    "\022\045\027\051\033\056\035\052\036\053\001\002\000" +
    "\004\023\uffdf\001\002\000\006\014\107\023\uffdd\001\002" +
    "\000\006\014\107\023\uffdc\001\002\000\020\007\054\012" +
    "\047\022\045\027\051\033\056\035\052\036\053\001\002" +
    "\000\020\007\054\012\047\022\045\027\051\033\056\035" +
    "\052\036\053\001\002\000\006\011\uffe1\014\107\001\002" +
    "\000\006\011\uffe0\014\107\001\002\000\004\020\165\001" +
    "\002\000\020\007\054\012\047\022\045\027\051\033\056" +
    "\035\052\036\053\001\002\000\006\011\uffe3\014\107\001" +
    "\002\000\004\004\170\001\002\000\016\005\uffda\006\027" +
    "\007\037\010\043\034\013\037\015\001\002\000\004\005" +
    "\uffdb\001\002\000\004\005\173\001\002\000\016\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\034\uffe6\037\uffe6\001\002\000" +
    "\020\007\054\012\047\022\045\027\051\033\056\035\052" +
    "\036\053\001\002\000\006\011\uffe2\014\107\001\002\000" +
    "\004\022\177\001\002\000\010\023\ufff8\034\013\037\015" +
    "\001\002\000\004\023\201\001\002\000\004\004\202\001" +
    "\002\000\014\005\ufff4\006\203\007\037\034\013\037\015" +
    "\001\002\000\004\022\215\001\002\000\004\005\ufff5\001" +
    "\002\000\014\005\uffe8\006\uffe8\007\uffe8\034\uffe8\037\uffe8" +
    "\001\002\000\004\005\214\001\002\000\014\005\uffe7\006" +
    "\uffe7\007\uffe7\034\uffe7\037\uffe7\001\002\000\014\005\uffe9" +
    "\006\uffe9\007\uffe9\034\uffe9\037\uffe9\001\002\000\014\005" +
    "\uffea\006\uffea\007\uffea\034\uffea\037\uffea\001\002\000\014" +
    "\005\ufff1\006\203\007\037\034\013\037\015\001\002\000" +
    "\004\005\ufff0\001\002\000\006\002\ufffb\031\ufffb\001\002" +
    "\000\010\007\140\034\013\037\015\001\002\000\004\023" +
    "\217\001\002\000\004\004\220\001\002\000\014\005\uffd8" +
    "\006\203\007\037\034\013\037\015\001\002\000\004\005" +
    "\uffd9\001\002\000\004\005\223\001\002\000\014\005\uffe5" +
    "\006\uffe5\007\uffe5\034\uffe5\037\uffe5\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\012\002\006\003\003\010\005\011\004\001" +
    "\001\000\002\001\001\000\012\002\224\003\003\010\005" +
    "\011\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\013\015\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\017\014\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\023\014\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\041\006\033\014\031\016\032\017" +
    "\043\023\030\024\034\030\040\031\035\041\037\043\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\033\014\031\016\032\017\043\023" +
    "\125\024\034\030\040\031\035\041\037\043\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\061\020\047" +
    "\021\045\022\062\026\057\027\056\030\054\042\060\001" +
    "\001\000\002\001\001\000\022\007\061\020\116\021\045" +
    "\022\062\026\057\027\056\030\054\042\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\061\027\114\030\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\061\027\077\030\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\061\026\057\027\056\030\054\042" +
    "\076\001\001\000\014\007\061\026\057\027\056\030\054" +
    "\042\065\001\001\000\002\001\001\000\012\007\061\026" +
    "\075\027\056\030\054\001\001\000\012\007\061\026\070" +
    "\027\056\030\054\001\001\000\002\001\001\000\010\007" +
    "\061\027\074\030\054\001\001\000\010\007\061\027\073" +
    "\030\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\061\020\102\021\045\022\062\026" +
    "\057\027\056\030\054\037\103\042\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\061\020\102\021\045\022\062\026\057\027\056\030\054" +
    "\037\112\042\060\001\001\000\020\007\061\021\107\022" +
    "\062\026\057\027\056\030\054\042\060\001\001\000\002" +
    "\001\001\000\016\007\061\022\111\026\057\027\056\030" +
    "\054\042\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\061\020\123\021\045\022\062\026" +
    "\057\027\056\030\054\042\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\131\001\001\000\002\001\001" +
    "\000\022\007\061\020\134\021\045\022\062\026\057\027" +
    "\056\030\054\042\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\141\033\142\036" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\061\020" +
    "\156\021\045\022\062\026\057\027\056\030\054\042\060" +
    "\001\001\000\002\001\001\000\022\007\061\020\155\021" +
    "\045\022\062\026\057\027\056\030\054\042\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\061\020\162\021\045\022\062\026\057\027\056" +
    "\030\054\042\060\001\001\000\022\007\061\020\161\021" +
    "\045\022\062\026\057\027\056\030\054\042\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\061\020\165\021\045\022\062\026\057\027\056" +
    "\030\054\042\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\033\014\031\016\032\017\043\023\170" +
    "\024\034\030\040\031\035\032\171\041\037\043\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\061\020\174\021\045\022\062\026\057\027" +
    "\056\030\054\042\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\177\014\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\205\013\203\014\031" +
    "\016\204\017\207\030\040\040\211\041\206\043\027\044" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\212\014\031\016\204" +
    "\017\207\030\040\040\211\041\206\043\027\044\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\141" +
    "\033\142\036\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\013\220\014\031\016\204\017\207\030\040" +
    "\040\211\041\206\043\027\044\210\045\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("Análisis incorrecto");
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_boolean",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_boolean",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_void ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_void",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_variables ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_variables ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_exp_n5 ::= exp_metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_exp_n5 ::= tipo_boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_exp_n5 ::= ID PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_exp_n5 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_exp_n5 ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_exp_n5 ::= PAR_A dec_exp PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_exp_n5 ::= NOT dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_exp_n5 ::= MENOS dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_exp_n4 ::= dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_exp_n4 ::= dec_exp_n4 DIV dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_exp_n4 ::= dec_exp_n4 POR dec_exp_n5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_exp_n3 ::= dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_exp_n3 ::= dec_exp_n3 MENOS dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_exp_n3 ::= dec_exp_n3 MAS dec_exp_n4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_exp_n2 ::= dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_exp_n2 ::= dec_exp_n2 DISTINTO dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_exp_n2 ::= dec_exp_n2 RELACIONALES dec_exp_n3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_exp_n1 ::= dec_exp_n2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_exp_n1 ::= dec_exp_n1 AND dec_exp_n2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_exp ::= dec_exp_n1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_exp ::= dec_exp OR dec_exp_n1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_return ::= RETURN dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_return",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_llamada_args ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_llamada_args ::= dec_exp COMA dec_llamada_args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_llamada_args ::= dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada_args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_metodo ::= ID PAR_A dec_llamada_args PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_metodo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_llamada ::= exp_metodo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_llamada",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_asigs ::= ID ASIGNACION dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_asigs",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_asigs ::= parte_tipos ASIGNACION dec_exp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_asigs",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // generar_tipos ::= ID COMA generar_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("generar_tipos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // generar_tipos ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("generar_tipos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parte_tipos ::= tipo_variables generar_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_tipos ::= parte_tipos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_tipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_for_void ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_void",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_for_void ::= bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for_void",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo_for ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_for ::= bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_st_3 ::= ID MASIGUAL dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_st_3 ::= ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_st_3 ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_st_3 ::= ID INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_3",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for_st_2 ::= ID DISTINTO dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_st_2 ::= ID RELACIONALES dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_st_1 ::= ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for_st_1 ::= tipo_variables ID ASIGNACION dec_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_st_1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cabecera_for ::= for_st_1 PUNTOCOMA for_st_2 PUNTOCOMA for_st_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_for_void ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for_void LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for_void",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_for ::= FOR PAR_A cabecera_for PAR_C LL_A cuerpo_for LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_for",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst_void ::= dec_asigs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst_void ::= dec_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst_void ::= dec_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst_void ::= dec_for_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_void",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inst ::= dec_return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inst ::= dec_asigs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inst ::= dec_tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst ::= dec_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inst ::= dec_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_inst_void ::= inst_void bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_inst_void ::= inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_inst ::= inst bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_inst ::= inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_inst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_metodo_void ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_metodo_void ::= bloque_inst_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo_void",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_metodo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_metodo ::= bloque_inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_argumentos ::= tipo_variables ID COMA dec_argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_argumentos ::= tipo_variables ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_argumentos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodo_void ::= CABECERA_METODOS tipo_void ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo_void LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo_void",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodo_simple ::= CABECERA_METODOS tipo_variables ID PAR_A dec_argumentos PAR_C LL_A cuerpo_metodo LL_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo_simple",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos_metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_metodos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos_metodos ::= metodo_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_metodos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_metodos ::= tipos_metodos dec_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_metodos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= dec_metodos EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // dec_metodos ::= tipos_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_metodos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

